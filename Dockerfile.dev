# Development Dockerfile - nur Runtime Environment, Code wird gemountet
FROM python:3.12-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Install uv using the installer script
ADD https://astral.sh/uv/install.sh /uv-installer.sh
RUN sh /uv-installer.sh && rm /uv-installer.sh
ENV PATH="/root/.local/bin:$PATH"

# Configure uv for optimal Docker usage
ENV UV_COMPILE_BYTECODE=1 \
    UV_LINK_MODE=copy \
    UV_PYTHON_DOWNLOADS=never

# Create non-root user
RUN groupadd -r app && useradd -r -d /app -g app app

# Copy only dependency files for installation (not the code)
COPY ./pyproject.toml ./README.md ./uv.lock ./
COPY ./server/pyproject.toml ./server/README.md ./server/uv.lock ./server/

# Create minimal directory structure
RUN mkdir -p graphiti_core server/graph_service

# Install dependencies only (code will be mounted, use --no-install-project)
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --no-dev --no-install-project && \
    cd server && uv sync --frozen --no-dev --no-install-project

# Set environment variables  
ENV PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    PORT=8000

# Change ownership to app user
RUN chown -R app:app /app

# Switch to non-root user
USER app

EXPOSE $PORT

# Use uv run for execution with mounted server code
CMD ["uv", "run", "--project", "/app/server", "uvicorn", "graph_service.main:app", "--host", "0.0.0.0", "--port", "8000"]